PROGRAM Menu
    MAIN:
        close := false
        DO
            OUTPUT "Welcome to Programming Design and Implementation, Workshop 3"
            OUTPUT "What would you like to do?"
            OUTPUT "1. Sum of 2 Integers"
            OUTPUT "2. Convert Temperature"
            OUTPUT "3. Convert a Character's Case"
            OUTPUT "4. Print the ASCII equivalent of a Character"
            OUTPUT "5. Check if 2 Integers are Divisable"
            OUTPUT "6. Split a Date into its components"
            OUTPUT "0. Exit"

            INPUT choice (integer)
            CASE choice
                1:
                    sum2ints <- none
                2:
                    temp <- none
                3:
                    charConv <- none
                4:
                    asciiConv<- none
                5:
                    divisible <- none
                6: 
                    splitData <- none
                7:
                    firstArrays <- none
                8:
                    secondArrays <- none
                0:
                    OUTPUT "Goodbye"
                    close := true
                DEFAULT:
                    OUTPUT "Error not a valid menu option"
        WHILE (NOT close)                
    END MAIN

    SUBMODULE: sum2Ints
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        numOne := inputInt <- "Enter the first integer", 0, 100
        numTwo := inputInt <- "Enter the second integer", 0, 100
        answer := numOne + numTwo

        OUTPUT "The answer is " + numOne + " + " + numeTwo " = " + answer
    END sum2Ints

    SUBMODULE: temp
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        close := false
        DO
            OUTPUT "Which temperature are you working with (C)elcius or (F)arenheit"
            INPUT choice (CONVERT TO UPPERCASE CHARACTER)
            CASE choice
                'C':
                    tempInCels := inputInt <- "Enter temperature in celcius", 0, 99999
                    farenheit := calcFaren <- tempInCels 
                    OUTPUT "Temp in farenheit: " + farenheit
                    finish := true
                'F':
                    tempInFaren := inputInt <- "Enter temperature in farenheit", 0, 99999
                    celcius := calcCelcius <- tempInFaren
                    OUTPUT "Temp in celcius " + celcius
                    finish := true
            END CASE
            WHILE (!finish)
    END temp

    SUBMODULE charConv
    IMPORTS: none
    EXPORTS: none
    ALGORITHM
        close := false
        DO
            OUTPUT "Convert to (U)ppercase or (L)owercase? Please select an option."
            INPUT choice (Character)
            choice := (Conver to Uppercase) choice 
            CASE choice
                U:
                    DO
                        OUTPUT "Enter a lowercase character"
                        INPUT lowercaseChar (Character)
                        lowerAscii := lowercaseChar (Convert to Integer)
                    WHILE (96 > lowerAscii > 123)

                    lowerToUpper := (lowerAscii - 32) (Convert to Character)
                    OUTPUT "Upper: " + lowerToUpper
                    cd := true
             
                 L:
                     DO
                         OUTPUT "Enter an uppercase character
                         INPUT uppercaseChar (Character)
                         upperAscii := uppercaseChar (Convert to Integer)
                     WHILE ( 64 > upperAscii > 91 )
                     
                     upperToLower = (upperAscii + 32) (Convert to Character)
                     OUTPUT "Lower: " + upperToLower
                     cd := true
                
                  DEFAULT:
                      OUTPUT "Error. Invalid Selection"
            END CASE
        WHILE (!cd)
    END charConv

    SUBMODULE: asciiConv
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        DO
            OUTPUT "Enter a character to convert to associated ASCII number."
            INPUT myChar (Character)
            charToAscii := (Convert to Integer) myChar
        WHILE (0 > charToAscii > 127)
 
            OUPUT "Ascii value: " + charToAscii
    END asciiConv
          
    SUBMODULE: divisble
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        OUTPUT "Check if two integers are divisble"
        numOne := inputInt("Enter the first number" 0, 9999)
        numTwo := inputInt("Divided by: ", 0, 9999)

        IF (intOne MOD intTwo != 0) THEN
            OUTPUT "not divisible!"
        ELSE
            OUTPUT "divisible!"
        END IF
    END divisble

    SUBMODULE: splitDate
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        date := inputInt <- "Please enter the date as an integer eg: 27032000 for 27th March 2000.", 1010001, 31129999

        day := date DIV 1000000
        roundedDay = day (convert to integer)

        month := (day MOD roundedDay) * 100
        roundedMonth := month (convert to integer)

        year := month MOD roundedMonth * 10000
        roundedyear = year (convert to integer)

        CASE roundedMonth
            1: 3: 5: 7: 8: 10: 12:
                IF (0 < roundedDay <= 31) THEN
                    OUTPUT "It is day" roundedDay "of month" roundedMonth " in the year" roundedYear
                ELSE
                    OUTPUT "Invalid"
                ENDIF
            4: 6: 9: 11
                IF (0 < roundedDay <= 30) THEN
                    OUTPUT "It is day" roundedDay "of month" roundedMonth " in the year" roundedYear
                ELSE
                    OUTPUT "Invalid"
                ENDIF
            2:
                IF ((roundedYear MOD 4 does not equal 0) AND (roundedYear MOD 4 does not equal 0) THEN
                    IF (0 < roundedDay <= 29) THEN
                        OUTPUT "It is day" roundedDay "of month" roundedMonth " in the year" roundedYear
                    ELSE
                        OUTPUT "Invalid"
                    ENDIF
                ELSE
                    IF (0 < roundedDay <= 28) THEN
                        OUTPUT "It is day" roundedDay "of month" roundedMonth " in the year" roundedYear "It is a leap year"
                    ELSE
                        OUTPUT "Invalid"
                    ENDIF
                ENDIF
            DEFAULT:
                OUTPUT "Invalid"
        ENDCASE
    END splitDate

    SUBMODULE: firstArrays
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        size := inputInt <- "Enter the size of the array between 1 and 20", 1, 20
        myArray (ARRAY of Integers OF SIZE size)

        min := 1
        max := 15
        FOR i := 0 TO (LENGTH OF myArray) INC BY 1
            number := (random integer between 1 and 15 inclusive)
            myArray[i] := number
        END FOR

        search := inputInt <- "Input array position", lower, LENGTH OF myArray
        IF (search < LENGHT OF myArray) THEN
            OUTPUT "Found: " + myArray[search]
        ELSE
            OUTPUT "Not found: " + search
       END IF
    END firstArrays

    SUBMODULE: secondArrays
    IMPORT: none
    EXPORT: none
    ALGORITHM:
        rows := inputInt <- "Please enter rows", 0, 9
        cols := inputInt <- "Please enter cols", 0, 9

        OUTPUT " The " + rows + " times " + cols + " table. (NEW LINE)"
        OUTPUT " | "
        FOR j := 0 TO cols INC BY 1
            OUTPUT (j + 1) + (TAB SPACE)
        ENDFOR
  
        OUTPUT "----------------------------------------------------------"
   
        twoD (TWO DIMENTIONAL ARRAY OF Integer OF SIZE rows + 1 BY cols + 1) 
        FOR i := 1 TO (LENGTH OF twoD[i]) INC BY 1
            OUTPUT i + " | "
            FOR  j := 1 TO (LENGTH OF twoD[i][j]) INC BY 1
                twoD[i][j] := i * j
                OUTPUT twoD[i][j] + (TAB SPACE)
            END FOR
            OUTPUT (NEW LINE)
        END FOR
    END secondArrays

    SUBMODULE: calcFaren
    IMPORT: tempInCels (real)
    EXPORT: farenheit (real)
    ALGORITM:
        farenheit := ((tempinCels * 9.0) / 5.0) + 32.0
    END calcFaren

    SUBMODULE: calcCelcius
    IMPORT: tempInFaren (real)
    EXPORT: celcius (real)
    ALGORITM:
        celcius := (tempInFaren - 32.0) * 5 / 9.0
   
    SUBMODULE: inputInt
    IMPORT: prompt (String), lower (integer), upper (integer)
    EXPORT: integer (integer)
    ALGORITHM:
        outStr := prompt
        error := "error"
        DO
            OUTPUT outStr
            INPUT integer
            outStr := error + prompt
        WHILE (lower < integer > upper)
    END inputInt
END PROGRAM
