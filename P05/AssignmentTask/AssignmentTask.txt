PROGRAM: AssignmentTask
    MAIN:
        convolute := Convolute.MatrixX
        kernel := Kernel.X

        resultArray := createResultArray <- convolute, kernel
        calcResult <- resultArray, convolute, kernel
   
        printArray <- "Convolute", convolute
        printArray <- "Kernel", kernel 
        printArray <- "Result", resultArray
    END MAIN:

    SUBMODULE: createResultArray
    IMPORT: convolute (2D array of integers), kernel (2D array of integers)
    EXPORT: resultArray (2D array of integers)
    ALGORITHM:
    
        n := (LENGTH OF convolute )
        m := (LENGTH OF convolute[0])
        k := (LENGTH OF kernel)

        resultArray (ARRAY OF Integers of SIZE (n - k + 1) by SIZE (m - k + 1))
    END createResultArray

    SUBMODULE: calcResult
    IMPORT: resultArray (2D array of integers), convolute (2D array of integers), kernel (2D array of integers)
    EXPORT: resultArray (2D array of integers)
    ALGORITHM:
        FOR i := 0 TO LENGTH OF resultArray (exclusive) INC by 1
            FOR j := 0 TO LENGTH OF resultArray[0] (exclusive) INC by 1
                resultArray[i][j] = calcConvolute <- i, j, convolute, kernel
            END FOR
        END FOR
    END calcResult

    SUBMODULE: calcConvolute
    IMPORT: x (integer), y (integer), resultArray (2D array of integers), convolute (2D array of integers), kernel (2D array of integers)
    EXPORT result (integer)
    ALGORITHM:
        result := 0
        FOR a := 0 TO LENGTH OF kernel (exclusive) INC by 1
            FOR b := 0 TO LENTH OF kernel[0] (exclusive) INC by 1
            result := result + convolute[a + x][b + y] * kernel[a][b]
            END FOR
        END FOR
    END calcConvolute  
 
    SUBMODULE: printArray
    IMPORT: name (String) pArray(ARRAY OF Integers)
    EXPORT: nothing
    ALGORITHM:
        OUTPUT pArray
    END printArray
    
   



